/** @file
  Entry point to the Standalone MM Foundation on RiscV platform.

Copyright (c) 2017 - 2021, Arm Ltd. All rights reserved.<BR>
Copyright (c) 2023, Ventana Micro System Inc. All rights reserved.<BR>

SPDX-License-Identifier: BSD-2-Clause-Patent

**/

#ifndef __STANDALONEMMCORE_ENTRY_POINT_H__
#define __STANDALONEMMCORE_ENTRY_POINT_H__

#include <StandaloneMmCpu.h>
#include <Library/FvLib.h>

#define CPU_INFO_FLAG_PRIMARY_CPU  0x00000001

typedef struct {
  UINT8     Type;    /* type of the structure */
  UINT8     Version; /* version of this structure */
  UINT16    Size;    /* size of this structure in bytes */
  UINT32    Attr;    /* attributes */
} EFI_PARAM_HEADER;

typedef struct {
  UINT32    ProcessorId;
  UINT32    Package;
  UINT32    Core;
  UINT32    Flags;
} EFI_RISCV_MM_CPU_INFO;

typedef struct {
  EFI_PARAM_HEADER                 Header;
  UINT64                           MmMemBase;
  UINT64                           MmMemLimit;
  UINT64                           MmImageBase;
  UINT64                           MmStackBase;
  UINT64                           MmHeapBase;
  UINT64                           MmNsCommBufBase;
  UINT64                           MmSharedBufBase;
  UINT64                           MmImageSize;
  UINT64                           MmPcpuStackSize;
  UINT64                           MmHeapSize;
  UINT64                           MmNsCommBufSize;
  UINT64                           MmSharedBufSize;
  UINT32                           NumMmMemRegions;
  UINT32                           NumCpus;
  EFI_RISCV_MM_CPU_INFO            CpuInfo;
} EFI_RISCV_MM_BOOT_INFO;

#define BOOT_INFO_STACK_BASE_OFFSET    32 // Used in assembly
STATIC_ASSERT (BOOT_INFO_STACK_BASE_OFFSET == OFFSET_OF (EFI_RISCV_MM_BOOT_INFO, MmStackBase));

/**
  Use the boot information passed by privileged firmware to populate a HOB list
  suitable for consumption by the MM Core and drivers.

  @param  [in, out] CpuDriverEntryPoint   Address of MM CPU driver entrypoint
  @param  [in]      PayloadBootInfo       Boot information passed by privileged
                                          firmware

**/
VOID *
EFIAPI
CreateHobListFromBootInfo (
  IN  OUT  PI_MM_CPU_DRIVER_ENTRYPOINT    *CpuDriverEntryPoint,
  IN       EFI_RISCV_MM_BOOT_INFO         *PayloadBootInfo
  );

/**
  The entry point of Standalone MM Foundation.

  @param  [in]  CpuId             The Id assigned to this running CPU
  @param  [in]  BootInfoAddress   The address of boot info

**/
VOID
EFIAPI
CModuleEntryPoint (
  IN UINT64  CpuId,
  IN VOID    *BootInfoAddress
  );

/**
  Auto generated function that calls the library constructors for all of the module's dependent libraries.

  This function must be called by _ModuleEntryPoint().
  This function calls the set of library constructors for the set of library instances
  that a module depends on.  This includes library instances that a module depends on
  directly and library instances that a module depends on indirectly through other
  libraries. This function is auto generated by build tools and those build tools are
  responsible for collecting the set of library instances, determine which ones have
  constructors, and calling the library constructors in the proper order based upon
  each of the library instances own dependencies.

  @param  ImageHandle  The image handle of the DXE Core.
  @param  SystemTable  A pointer to the EFI System Table.

**/
VOID
EFIAPI
ProcessLibraryConstructorList (
  IN EFI_HANDLE               ImageHandle,
  IN EFI_RISCV_MM_BOOT_INFO   *MmSystemTable
  );

/**
  Auto generated function that calls a set of module entry points.

  This function must be called by _ModuleEntryPoint().
  This function calls the set of module entry points.
  This function is auto generated by build tools and those build tools are responsible
  for collecting the module entry points and calling them in a specified order.

  @param  HobStart  Pointer to the beginning of the HOB List passed in from the PEI Phase.

**/
VOID
EFIAPI
ProcessModuleEntryPointList (
  IN VOID  *HobStart
  );

#endif
